// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/chernyshev-alex/go-hexagon/internal/adapters/api"

	mock "github.com/stretchr/testify/mock"
)

// ArticleFacade is an autogenerated mock type for the ArticleFacade type
type ArticleFacade struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *ArticleFacade) Create(_a0 context.Context, _a1 api.ArticleRequest) (api.ArticleResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 api.ArticleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, api.ArticleRequest) (api.ArticleResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, api.ArticleRequest) api.ArticleResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(api.ArticleResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, api.ArticleRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, articleId
func (_m *ArticleFacade) Get(ctx context.Context, articleId string) (api.ArticleResponse, error) {
	ret := _m.Called(ctx, articleId)

	var r0 api.ArticleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (api.ArticleResponse, error)); ok {
		return rf(ctx, articleId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) api.ArticleResponse); ok {
		r0 = rf(ctx, articleId)
	} else {
		r0 = ret.Get(0).(api.ArticleResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, articleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchBy provides a mock function with given fields: ctx, what, value
func (_m *ArticleFacade) SearchBy(ctx context.Context, what string, value string) ([]api.ArticleResponse, error) {
	ret := _m.Called(ctx, what, value)

	var r0 []api.ArticleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]api.ArticleResponse, error)); ok {
		return rf(ctx, what, value)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []api.ArticleResponse); ok {
		r0 = rf(ctx, what, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.ArticleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, what, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewArticleFacade creates a new instance of ArticleFacade. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArticleFacade(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArticleFacade {
	mock := &ArticleFacade{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
